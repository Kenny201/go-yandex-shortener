// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/shortener/shortener.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/Kenny201/go-yandex-shortener.git/internal/domain/shortener/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockRepository) CheckHealth() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockRepositoryMockRecorder) CheckHealth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockRepository)(nil).CheckHealth))
}

// Create mocks base method.
func (m *MockRepository) Create(url *entity.URL) (*entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", url)
	ret0, _ := ret[0].(*entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), url)
}

// CreateList mocks base method.
func (m *MockRepository) CreateList(userID interface{}, urls []*entity.URLItem) ([]*entity.URLItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", userID, urls)
	ret0, _ := ret[0].([]*entity.URLItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockRepositoryMockRecorder) CreateList(userID, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockRepository)(nil).CreateList), userID, urls)
}

// Get mocks base method.
func (m *MockRepository) Get(shortKey string) (*entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", shortKey)
	ret0, _ := ret[0].(*entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(shortKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), shortKey)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll(userID string) ([]*entity.URLItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]*entity.URLItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), userID)
}

// MarkAsDeleted mocks base method.
func (m *MockRepository) MarkAsDeleted(batch []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsDeleted", batch, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsDeleted indicates an expected call of MarkAsDeleted.
func (mr *MockRepositoryMockRecorder) MarkAsDeleted(batch, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsDeleted", reflect.TypeOf((*MockRepository)(nil).MarkAsDeleted), batch, userID)
}
